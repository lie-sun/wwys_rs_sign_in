var through = require('through2')
, fs = require('fs')
, colors = require('colors')
, getPath = function(path, isDir){
	path = path.replace(/\\/g, '/')
	if(isDir){
		path += /\/$/.test(path) ? '' : '/'
	}
	return path;
}
, mkdirSync = function (dirpath, mode) {
    if (!fs.existsSync(dirpath)) {
        var prePath;
        dirpath.split('/').forEach(function(dirname) {
            if (prePath) {
                prePath += '/'+ dirname;
            }
            else {
                prePath = dirname;
            }
            if (!fs.existsSync(prePath)) {
                if (!fs.mkdirSync(prePath, mode)) {
                    return false;
                }
            }
        });
    }
    return true; 
}
, writeFileSync = function (filePath, content, op) {
	var op = op || {}
	var fileName = filePath
	var dirName = ''
	var i = filePath.lastIndexOf('/')
	if(i>-1){
		dirName = filePath.substr(0, i);
	}
    if (!fs.existsSync(dirName)) {
		if(!mkdirSync(dirName)){
			return false;
		}
		
	}
	var type = op.append ? 'append' : 'write'
	return fs[type+'FileSync'](filePath, content);
}
, readFileSync = function (filePath, op) {
	if(fs.existsSync(filePath)){
		return fs.readFileSync(filePath);
	}
	return false;
}
, templateReplace = function (s, o) {
	return s.replace(/\{([a-zA-Z_][a-zA-Z0-9_]*)\}/g, function(t, m){
		return o[m]==undefined ? '' : o[m];
	});
}
;

var cwd = getPath(process.cwd(), 1)
var methodMap = {
	fs: fs
	, writeFile: writeFileSync
	, mkdir: mkdirSync
	, readFile: readFileSync
	, cwd: cwd
	, getPath: getPath
	, replace: templateReplace
}


module.exports = function(args){
	var args = args || {}
	;
	return through.obj(function(file, enc, cb){
		var content = file.contents!=null ? file.contents.toString() : null
		, fileFullPath = getPath(file.path)
		, filePath = fileFullPath.replace(cwd, '')
		, t = fileFullPath.split('/')
		, fileFullName = t[t.length-1]
		, t = fileFullName.match(/\.[a-z0-9]+$/ig)
		, suffix = t ? t[0] : ''
		, fileName = fileFullName.substr(0, fileFullName.length-suffix.length)
		;
		var arg = {
			file: file
			, enc: enc
			, content: content
			, fileFullPath: fileFullPath
			, filePath: filePath
			, fileFullName: fileFullName
			, fileName: fileName
			, suffix: suffix
		}
		, rs
		;
		for(var k in methodMap){
			arg[k] = methodMap[k]
		}
		if(typeof args.fn=='function'){
			rs = args.fn.call(null, arg)
		}
		if(typeof arg.content=='string'){
			file.contents = new Buffer(arg.content);
		}
		if(rs===false){
			cb();
		}else{
			cb(null, file);
		}
	},function(cb){
		if(typeof args.finish=='function'){
			args.finish.call(methodMap, methodMap)
		}
		cb();
	});
};


